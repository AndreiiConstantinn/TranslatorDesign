package c.analyzer;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\017\004\000\002\017\003\000\002\015\010" +
    "\000\002\015\007\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\003\004\000\002\003\003\000\002\004\006\000\002\004" +
    "\004\000\002\010\005\000\002\010\003\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\011\005\000\002\011\004\000\002\011\004\000\002" +
    "\011\003\000\002\011\007\000\002\011\006\000\002\011" +
    "\006\000\002\011\005\000\002\012\004\000\002\012\003" +
    "\000\002\013\004\000\002\013\003\000\002\014\004\000" +
    "\002\014\005\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\022" +
    "\005\000\002\020\004\000\002\020\003\000\002\020\004" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\024\004\000\002" +
    "\024\005\000\002\025\004\000\002\023\007\000\002\023" +
    "\011\000\002\023\007\000\002\026\007\000\002\026\006" +
    "\000\002\026\006\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\005\000\002\031" +
    "\003\000\002\031\006\000\002\031\004\000\002\031\004" +
    "\000\002\032\003\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\033" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\034\003\000\002\034\005\000\002\034\005\000" +
    "\002\035\003\000\002\035\005\000\002\035\005\000\002" +
    "\036\003\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\037\003\000\002\037\005" +
    "\000\002\037\005\000\002\040\003\000\002\040\005\000" +
    "\002\041\003\000\002\041\005\000\002\042\003\000\002" +
    "\042\005\000\002\043\003\000\002\043\005\000\002\044" +
    "\003\000\002\044\005\000\002\045\003\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\027\003\000\002\046\003\000\002\046\004" +
    "\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\016\002\uffff\004\004\005\012\010\010\047" +
    "\014\053\005\001\002\000\004\033\ufff7\001\002\000\004" +
    "\033\ufff8\001\002\000\016\002\000\004\004\005\012\010" +
    "\010\047\014\053\005\001\002\000\004\002\313\001\002" +
    "\000\004\033\ufff6\001\002\000\016\002\ufffd\004\ufffd\005" +
    "\ufffd\010\ufffd\047\ufffd\053\ufffd\001\002\000\004\033\ufffa" +
    "\001\002\000\004\033\015\001\002\000\004\033\ufff9\001" +
    "\002\000\004\011\016\001\002\000\010\012\021\030\020" +
    "\033\023\001\002\000\006\030\304\033\305\001\002\000" +
    "\006\030\uffe2\033\uffe2\001\002\000\004\013\030\001\002" +
    "\000\010\012\ufff0\017\ufff0\020\ufff0\001\002\000\014\012" +
    "\uffe8\015\273\017\uffe8\020\uffe8\022\271\001\002\000\006" +
    "\012\026\020\025\001\002\000\006\030\020\033\023\001" +
    "\002\000\004\013\030\001\002\000\016\002\ufffc\004\ufffc" +
    "\005\ufffc\010\ufffc\047\ufffc\053\ufffc\001\002\000\054\004" +
    "\040\005\034\006\042\007\056\011\037\013\030\024\031" +
    "\025\053\026\041\030\044\031\102\032\070\033\103\043" +
    "\100\047\074\053\075\070\073\075\043\076\035\077\051" +
    "\100\046\001\002\000\032\011\037\024\031\025\053\026" +
    "\041\030\044\031\102\032\070\033\103\075\043\076\035" +
    "\077\051\100\046\001\002\000\040\012\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\023\130\076\uffa2\104\132\105\133\106\131" +
    "\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2\001" +
    "\002\000\056\012\uffad\016\uffad\017\uffad\020\uffad\023\uffad" +
    "\025\uffad\026\uffad\027\145\030\144\076\uffad\101\143\102" +
    "\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad" +
    "\111\uffad\112\uffad\113\uffad\114\uffad\001\002\000\006\030" +
    "\020\033\023\001\002\000\032\011\037\024\031\025\053" +
    "\026\041\030\044\031\102\032\070\033\103\075\043\076" +
    "\035\077\051\100\046\001\002\000\020\012\uff99\016\uff99" +
    "\017\uff99\020\uff99\112\164\113\uff99\114\uff99\001\002\000" +
    "\032\011\037\024\031\025\053\026\041\030\044\031\102" +
    "\032\070\033\103\075\043\076\035\077\051\100\046\001" +
    "\002\000\006\030\020\033\023\001\002\000\032\011\037" +
    "\024\031\025\053\026\041\030\044\031\102\032\070\033" +
    "\103\075\043\076\035\077\051\100\046\001\002\000\004" +
    "\011\240\001\002\000\032\011\037\024\031\025\053\026" +
    "\041\030\044\031\102\032\070\033\103\075\043\076\035" +
    "\077\051\100\046\001\002\000\032\011\037\024\031\025" +
    "\053\026\041\030\044\031\102\032\070\033\103\075\043" +
    "\076\035\077\051\100\046\001\002\000\112\012\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\075\uffbe\076\uffbe\101" +
    "\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe" +
    "\110\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\120\uffbe\121" +
    "\uffbe\122\uffbe\123\uffbe\124\uffbe\125\uffbe\126\uffbe\127\uffbe" +
    "\130\uffbe\131\uffbe\001\002\000\032\011\037\024\031\025" +
    "\053\026\041\030\044\031\102\032\070\033\103\075\043" +
    "\076\035\077\051\100\046\001\002\000\014\012\uff95\016" +
    "\uff95\017\uff95\020\uff95\114\233\001\002\000\030\012\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\076\uff9f\107\125\110\126\111" +
    "\uff9f\112\uff9f\113\uff9f\114\uff9f\001\002\000\032\011\037" +
    "\024\031\025\053\026\041\030\044\031\102\032\070\033" +
    "\103\075\043\076\035\077\051\100\046\001\002\000\056" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\013\uffd1\014" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\043\uffd1\047\uffd1\053\uffd1\070\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\100\uffd1\001\002\000\032\011\037\024\031" +
    "\025\053\026\041\030\044\031\102\032\070\033\103\075" +
    "\043\076\035\077\051\100\046\001\002\000\056\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\011\uffd0\013\uffd0\014\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\043\uffd0\047\uffd0\053\uffd0\070\uffd0\075\uffd0\076\uffd0\077" +
    "\uffd0\100\uffd0\001\002\000\004\017\230\001\002\000\034" +
    "\011\037\017\225\024\031\025\053\026\041\030\044\031" +
    "\102\032\070\033\103\075\043\076\035\077\051\100\046" +
    "\001\002\000\056\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011" +
    "\uffd3\013\uffd3\014\uffd3\024\uffd3\025\uffd3\026\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\043\uffd3\047\uffd3\053\uffd3\070" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\001\002\000\104" +
    "\012\uffb1\016\uffb1\017\uffb1\020\uffb1\022\204\023\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\076\uffb1\101\uffb1\102\uffb1" +
    "\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111" +
    "\uffb1\112\uffb1\113\uffb1\114\uffb1\120\201\121\205\122\207" +
    "\123\203\124\200\125\202\126\210\127\206\130\211\131" +
    "\177\001\002\000\006\017\174\020\173\001\002\000\112" +
    "\012\uffba\015\167\016\uffba\017\uffba\020\uffba\022\uffba\023" +
    "\uffba\024\170\025\uffba\026\uffba\027\uffba\030\uffba\075\166" +
    "\076\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106" +
    "\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba" +
    "\120\uffba\121\uffba\122\uffba\123\uffba\124\uffba\125\uffba\126" +
    "\uffba\127\uffba\130\uffba\131\uffba\001\002\000\016\012\uff97" +
    "\016\uff97\017\uff97\020\uff97\113\162\114\uff97\001\002\000" +
    "\056\004\040\005\034\006\042\007\056\011\037\013\030" +
    "\014\157\024\031\025\053\026\041\030\044\031\102\032" +
    "\070\033\103\043\100\047\074\053\075\070\073\075\043" +
    "\076\035\077\051\100\046\001\002\000\044\012\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\023\uffa7\076\uffa7\102\135\103\136" +
    "\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112" +
    "\uffa7\113\uffa7\114\uffa7\001\002\000\024\012\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\076\123\111\uff9d\112\uff9d\113\uff9d\114" +
    "\uff9d\001\002\000\050\012\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\023\uffaa\025\140\026\141\076\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa" +
    "\113\uffaa\114\uffaa\001\002\000\112\012\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\075\uffc0\076\uffc0\101\uffc0\102" +
    "\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0" +
    "\111\uffc0\112\uffc0\113\uffc0\114\uffc0\120\uffc0\121\uffc0\122" +
    "\uffc0\123\uffc0\124\uffc0\125\uffc0\126\uffc0\127\uffc0\130\uffc0" +
    "\131\uffc0\001\002\000\022\012\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\111\120\112\uff9b\113\uff9b\114\uff9b\001\002\000\012" +
    "\012\uff89\016\uff89\017\uff89\020\uff89\001\002\000\004\011" +
    "\114\001\002\000\006\030\020\033\023\001\002\000\006" +
    "\030\020\033\023\001\002\000\056\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\011\uffd6\013\uffd6\014\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\043\uffd6\047" +
    "\uffd6\053\uffd6\070\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6" +
    "\001\002\000\056\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\013\uffd2\014\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\043\uffd2\047\uffd2\053\uffd2\070" +
    "\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\001\002\000\044" +
    "\006\042\007\056\011\037\013\030\024\031\025\053\026" +
    "\041\030\044\031\102\032\070\033\103\043\100\070\073" +
    "\075\043\076\035\077\051\100\046\001\002\000\056\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\013\uffd4\014\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\043\uffd4\047\uffd4\053\uffd4\070\uffd4\075\uffd4\076\uffd4" +
    "\077\uffd4\100\uffd4\001\002\000\112\012\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\075\uffc1\076\uffc1\101\uffc1\102" +
    "\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1" +
    "\111\uffc1\112\uffc1\113\uffc1\114\uffc1\120\uffc1\121\uffc1\122" +
    "\uffc1\123\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1" +
    "\131\uffc1\001\002\000\112\012\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\075\uffc2\076\uffc2\101\uffc2\102\uffc2\103" +
    "\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2" +
    "\112\uffc2\113\uffc2\114\uffc2\120\uffc2\121\uffc2\122\uffc2\123" +
    "\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131\uffc2" +
    "\001\002\000\004\070\105\001\002\000\004\011\106\001" +
    "\002\000\032\011\037\024\031\025\053\026\041\030\044" +
    "\031\102\032\070\033\103\075\043\076\035\077\051\100" +
    "\046\001\002\000\004\012\110\001\002\000\004\017\111" +
    "\001\002\000\056\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011" +
    "\uffcb\013\uffcb\014\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\043\uffcb\047\uffcb\053\uffcb\070" +
    "\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\001\002\000\006" +
    "\017\uffed\020\uffed\001\002\000\006\017\uffee\020\uffee\001" +
    "\002\000\032\011\037\024\031\025\053\026\041\030\044" +
    "\031\102\032\070\033\103\075\043\076\035\077\051\100" +
    "\046\001\002\000\004\012\116\001\002\000\044\006\042" +
    "\007\056\011\037\013\030\024\031\025\053\026\041\030" +
    "\044\031\102\032\070\033\103\043\100\070\073\075\043" +
    "\076\035\077\051\100\046\001\002\000\056\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\011\uffcc\013\uffcc\014\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\043" +
    "\uffcc\047\uffcc\053\uffcc\070\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\100\uffcc\001\002\000\032\011\037\024\031\025\053\026" +
    "\041\030\044\031\102\032\070\033\103\075\043\076\035" +
    "\077\051\100\046\001\002\000\056\012\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\076\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106" +
    "\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1" +
    "\001\002\000\024\012\uff9c\016\uff9c\017\uff9c\020\uff9c\076" +
    "\123\111\uff9c\112\uff9c\113\uff9c\114\uff9c\001\002\000\032" +
    "\011\037\024\031\025\053\026\041\030\044\031\102\032" +
    "\070\033\103\075\043\076\035\077\051\100\046\001\002" +
    "\000\030\012\uff9e\016\uff9e\017\uff9e\020\uff9e\076\uff9e\107" +
    "\125\110\126\111\uff9e\112\uff9e\113\uff9e\114\uff9e\001\002" +
    "\000\032\011\037\024\031\025\053\026\041\030\044\031" +
    "\102\032\070\033\103\075\043\076\035\077\051\100\046" +
    "\001\002\000\032\011\037\024\031\025\053\026\041\030" +
    "\044\031\102\032\070\033\103\075\043\076\035\077\051" +
    "\100\046\001\002\000\040\012\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\023\130\076\uffa0\104\132\105\133\106\131\107\uffa0" +
    "\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\001\002\000" +
    "\032\011\037\024\031\025\053\026\041\030\044\031\102" +
    "\032\070\033\103\075\043\076\035\077\051\100\046\001" +
    "\002\000\032\011\037\024\031\025\053\026\041\030\044" +
    "\031\102\032\070\033\103\075\043\076\035\077\051\100" +
    "\046\001\002\000\032\011\037\024\031\025\053\026\041" +
    "\030\044\031\102\032\070\033\103\075\043\076\035\077" +
    "\051\100\046\001\002\000\032\011\037\024\031\025\053" +
    "\026\041\030\044\031\102\032\070\033\103\075\043\076" +
    "\035\077\051\100\046\001\002\000\044\012\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\023\uffa4\076\uffa4\102\135\103\136\104" +
    "\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4" +
    "\113\uffa4\114\uffa4\001\002\000\032\011\037\024\031\025" +
    "\053\026\041\030\044\031\102\032\070\033\103\075\043" +
    "\076\035\077\051\100\046\001\002\000\032\011\037\024" +
    "\031\025\053\026\041\030\044\031\102\032\070\033\103" +
    "\075\043\076\035\077\051\100\046\001\002\000\050\012" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\023\uffa8\025\140\026\141" +
    "\076\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107" +
    "\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\001\002" +
    "\000\032\011\037\024\031\025\053\026\041\030\044\031" +
    "\102\032\070\033\103\075\043\076\035\077\051\100\046" +
    "\001\002\000\032\011\037\024\031\025\053\026\041\030" +
    "\044\031\102\032\070\033\103\075\043\076\035\077\051" +
    "\100\046\001\002\000\056\012\uffab\016\uffab\017\uffab\020" +
    "\uffab\023\uffab\025\uffab\026\uffab\027\145\030\144\076\uffab" +
    "\101\143\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107" +
    "\uffab\110\uffab\111\uffab\112\uffab\113\uffab\114\uffab\001\002" +
    "\000\032\011\037\024\031\025\053\026\041\030\044\031" +
    "\102\032\070\033\103\075\043\076\035\077\051\100\046" +
    "\001\002\000\032\011\037\024\031\025\053\026\041\030" +
    "\044\031\102\032\070\033\103\075\043\076\035\077\051" +
    "\100\046\001\002\000\032\011\037\024\031\025\053\026" +
    "\041\030\044\031\102\032\070\033\103\075\043\076\035" +
    "\077\051\100\046\001\002\000\056\012\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\023\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\076\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106" +
    "\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf" +
    "\001\002\000\056\012\uffb0\016\uffb0\017\uffb0\020\uffb0\023" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\076\uffb0\101\uffb0" +
    "\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110" +
    "\uffb0\111\uffb0\112\uffb0\113\uffb0\114\uffb0\001\002\000\056" +
    "\012\uffae\016\uffae\017\uffae\020\uffae\023\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\076\uffae\101\uffae\102\uffae\103\uffae" +
    "\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae\112" +
    "\uffae\113\uffae\114\uffae\001\002\000\056\012\uffac\016\uffac" +
    "\017\uffac\020\uffac\023\uffac\025\uffac\026\uffac\027\145\030" +
    "\144\076\uffac\101\143\102\uffac\103\uffac\104\uffac\105\uffac" +
    "\106\uffac\107\uffac\110\uffac\111\uffac\112\uffac\113\uffac\114" +
    "\uffac\001\002\000\050\012\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\023\uffa9\025\140\026\141\076\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9" +
    "\113\uffa9\114\uffa9\001\002\000\044\012\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\023\uffa5\076\uffa5\102\135\103\136\104\uffa5" +
    "\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5\113" +
    "\uffa5\114\uffa5\001\002\000\044\012\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\023\uffa3\076\uffa3\102\135\103\136\104\uffa3\105" +
    "\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3" +
    "\114\uffa3\001\002\000\044\012\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\023\uffa6\076\uffa6\102\135\103\136\104\uffa6\105\uffa6" +
    "\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\114" +
    "\uffa6\001\002\000\040\012\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\023\130\076\uffa1\104\132\105\133\106\131\107\uffa1\110" +
    "\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\001\002\000\062" +
    "\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\013\uffd8\014\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\043\uffd8\047\uffd8\053\uffd8\070" +
    "\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\001\002\000\056" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\013\uffd7\014" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\043\uffd7\047\uffd7\053\uffd7\070\uffd7\075\uffd7\076" +
    "\uffd7\077\uffd7\100\uffd7\001\002\000\056\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\013\uffd5\014\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\043\uffd5" +
    "\047\uffd5\053\uffd5\070\uffd5\075\uffd5\076\uffd5\077\uffd5\100" +
    "\uffd5\001\002\000\032\011\037\024\031\025\053\026\041" +
    "\030\044\031\102\032\070\033\103\075\043\076\035\077" +
    "\051\100\046\001\002\000\020\012\uff98\016\uff98\017\uff98" +
    "\020\uff98\112\164\113\uff98\114\uff98\001\002\000\032\011" +
    "\037\024\031\025\053\026\041\030\044\031\102\032\070" +
    "\033\103\075\043\076\035\077\051\100\046\001\002\000" +
    "\022\012\uff9a\016\uff9a\017\uff9a\020\uff9a\111\120\112\uff9a" +
    "\113\uff9a\114\uff9a\001\002\000\112\012\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\075\uffbb\076\uffbb\101\uffbb\102" +
    "\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb" +
    "\111\uffbb\112\uffbb\113\uffbb\114\uffbb\120\uffbb\121\uffbb\122" +
    "\uffbb\123\uffbb\124\uffbb\125\uffbb\126\uffbb\127\uffbb\130\uffbb" +
    "\131\uffbb\001\002\000\032\011\037\024\031\025\053\026" +
    "\041\030\044\031\102\032\070\033\103\075\043\076\035" +
    "\077\051\100\046\001\002\000\112\012\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\075\uffbc\076\uffbc\101\uffbc\102" +
    "\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc" +
    "\111\uffbc\112\uffbc\113\uffbc\114\uffbc\120\uffbc\121\uffbc\122" +
    "\uffbc\123\uffbc\124\uffbc\125\uffbc\126\uffbc\127\uffbc\130\uffbc" +
    "\131\uffbc\001\002\000\004\016\172\001\002\000\112\012" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\075\uffbd\076" +
    "\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\120" +
    "\uffbd\121\uffbd\122\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd" +
    "\127\uffbd\130\uffbd\131\uffbd\001\002\000\006\030\020\033" +
    "\023\001\002\000\056\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\011\ufff2\013\ufff2\014\ufff2\024\ufff2\025\ufff2\026\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\043\ufff2\047\ufff2\053\ufff2" +
    "\070\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\001\002\000" +
    "\006\017\176\020\025\001\002\000\056\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\013\ufff3\014\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\043\ufff3" +
    "\047\ufff3\053\ufff3\070\ufff3\075\ufff3\076\ufff3\077\ufff3\100" +
    "\ufff3\001\002\000\032\011\037\024\031\025\053\026\041" +
    "\030\044\031\102\032\070\033\103\075\043\076\035\077" +
    "\051\100\046\001\002\000\032\011\037\024\031\025\053" +
    "\026\041\030\044\031\102\032\070\033\103\075\043\076" +
    "\035\077\051\100\046\001\002\000\032\011\037\024\031" +
    "\025\053\026\041\030\044\031\102\032\070\033\103\075" +
    "\043\076\035\077\051\100\046\001\002\000\032\011\037" +
    "\024\031\025\053\026\041\030\044\031\102\032\070\033" +
    "\103\075\043\076\035\077\051\100\046\001\002\000\032" +
    "\011\037\024\031\025\053\026\041\030\044\031\102\032" +
    "\070\033\103\075\043\076\035\077\051\100\046\001\002" +
    "\000\032\011\037\024\031\025\053\026\041\030\044\031" +
    "\102\032\070\033\103\075\043\076\035\077\051\100\046" +
    "\001\002\000\032\011\037\024\031\025\053\026\041\030" +
    "\044\031\102\032\070\033\103\075\043\076\035\077\051" +
    "\100\046\001\002\000\032\011\037\024\031\025\053\026" +
    "\041\030\044\031\102\032\070\033\103\075\043\076\035" +
    "\077\051\100\046\001\002\000\032\011\037\024\031\025" +
    "\053\026\041\030\044\031\102\032\070\033\103\075\043" +
    "\076\035\077\051\100\046\001\002\000\032\011\037\024" +
    "\031\025\053\026\041\030\044\031\102\032\070\033\103" +
    "\075\043\076\035\077\051\100\046\001\002\000\032\011" +
    "\037\024\031\025\053\026\041\030\044\031\102\032\070" +
    "\033\103\075\043\076\035\077\051\100\046\001\002\000" +
    "\012\012\uff8b\016\uff8b\017\uff8b\020\uff8b\001\002\000\012" +
    "\012\uff8d\016\uff8d\017\uff8d\020\uff8d\001\002\000\012\012" +
    "\uff91\016\uff91\017\uff91\020\uff91\001\002\000\012\012\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\001\002\000\012\012\uff92\016" +
    "\uff92\017\uff92\020\uff92\001\002\000\012\012\uff94\016\uff94" +
    "\017\uff94\020\uff94\001\002\000\012\012\uff90\016\uff90\017" +
    "\uff90\020\uff90\001\002\000\012\012\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\001\002\000\012\012\uff93\016\uff93\017\uff93\020" +
    "\uff93\001\002\000\012\012\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\001\002\000\012\012\uff8a\016\uff8a\017\uff8a\020\uff8a\001" +
    "\002\000\056\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf" +
    "\013\uffcf\014\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\043\uffcf\047\uffcf\053\uffcf\070\uffcf" +
    "\075\uffcf\076\uffcf\077\uffcf\100\uffcf\001\002\000\004\017" +
    "\227\001\002\000\056\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\011\uffce\013\uffce\014\uffce\024\uffce\025\uffce\026\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\043\uffce\047\uffce\053\uffce" +
    "\070\uffce\075\uffce\076\uffce\077\uffce\100\uffce\001\002\000" +
    "\056\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\013\uffcd" +
    "\014\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\043\uffcd\047\uffcd\053\uffcd\070\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\100\uffcd\001\002\000\104\012\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\076\uffb5\101\uffb5\102\uffb5\103\uffb5\104" +
    "\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5" +
    "\113\uffb5\114\uffb5\120\uffb5\121\uffb5\122\uffb5\123\uffb5\124" +
    "\uffb5\125\uffb5\126\uffb5\127\uffb5\130\uffb5\131\uffb5\001\002" +
    "\000\104\012\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3\023" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\076\uffb3\101\uffb3" +
    "\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110" +
    "\uffb3\111\uffb3\112\uffb3\113\uffb3\114\uffb3\120\uffb3\121\uffb3" +
    "\122\uffb3\123\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130" +
    "\uffb3\131\uffb3\001\002\000\032\011\037\024\031\025\053" +
    "\026\041\030\044\031\102\032\070\033\103\075\043\076" +
    "\035\077\051\100\046\001\002\000\016\012\uff96\016\uff96" +
    "\017\uff96\020\uff96\113\162\114\uff96\001\002\000\104\012" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\022\uffb2\023\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\076\uffb2\101\uffb2\102\uffb2\103" +
    "\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2" +
    "\112\uffb2\113\uffb2\114\uffb2\120\uffb2\121\uffb2\122\uffb2\123" +
    "\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130\uffb2\131\uffb2" +
    "\001\002\000\104\012\uffb6\016\uffb6\017\uffb6\020\uffb6\022" +
    "\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\076\uffb6" +
    "\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107" +
    "\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\114\uffb6\120\uffb6" +
    "\121\uffb6\122\uffb6\123\uffb6\124\uffb6\125\uffb6\126\uffb6\127" +
    "\uffb6\130\uffb6\131\uffb6\001\002\000\104\012\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\022\uffb8\023\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\076\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8" +
    "\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\114\uffb8\120\uffb8\121\uffb8\122\uffb8\123\uffb8\124\uffb8" +
    "\125\uffb8\126\uffb8\127\uffb8\130\uffb8\131\uffb8\001\002\000" +
    "\034\011\037\017\241\024\031\025\053\026\041\030\044" +
    "\031\102\032\070\033\103\075\043\076\035\077\051\100" +
    "\046\001\002\000\034\011\037\017\253\024\031\025\053" +
    "\026\041\030\044\031\102\032\070\033\103\075\043\076" +
    "\035\077\051\100\046\001\002\000\004\017\246\001\002" +
    "\000\004\012\244\001\002\000\044\006\042\007\056\011" +
    "\037\013\030\024\031\025\053\026\041\030\044\031\102" +
    "\032\070\033\103\043\100\070\073\075\043\076\035\077" +
    "\051\100\046\001\002\000\056\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\011\uffca\013\uffca\014\uffca\024\uffca\025\uffca\026" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\043\uffca\047\uffca" +
    "\053\uffca\070\uffca\075\uffca\076\uffca\077\uffca\100\uffca\001" +
    "\002\000\034\011\037\017\247\024\031\025\053\026\041" +
    "\030\044\031\102\032\070\033\103\075\043\076\035\077" +
    "\051\100\046\001\002\000\004\012\uffc6\001\002\000\004" +
    "\017\251\001\002\000\034\011\037\012\uffc7\024\031\025" +
    "\053\026\041\030\044\031\102\032\070\033\103\075\043" +
    "\076\035\077\051\100\046\001\002\000\004\012\uffc9\001" +
    "\002\000\034\011\037\012\uffc3\024\031\025\053\026\041" +
    "\030\044\031\102\032\070\033\103\075\043\076\035\077" +
    "\051\100\046\001\002\000\004\017\255\001\002\000\034" +
    "\011\037\012\uffc5\024\031\025\053\026\041\030\044\031" +
    "\102\032\070\033\103\075\043\076\035\077\051\100\046" +
    "\001\002\000\004\012\uffc8\001\002\000\004\012\uffc4\001" +
    "\002\000\104\012\uffb4\016\uffb4\017\uffb4\020\uffb4\022\uffb4" +
    "\023\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\076\uffb4\101" +
    "\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4" +
    "\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4\120\uffb4\121" +
    "\uffb4\122\uffb4\123\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4" +
    "\130\uffb4\131\uffb4\001\002\000\006\017\uffec\020\uffec\001" +
    "\002\000\004\012\263\001\002\000\112\012\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\075\uffbf\076\uffbf\101\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110" +
    "\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf\120\uffbf\121\uffbf" +
    "\122\uffbf\123\uffbf\124\uffbf\125\uffbf\126\uffbf\127\uffbf\130" +
    "\uffbf\131\uffbf\001\002\000\104\012\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\022\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\076\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7" +
    "\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\114" +
    "\uffb7\120\uffb7\121\uffb7\122\uffb7\123\uffb7\124\uffb7\125\uffb7" +
    "\126\uffb7\127\uffb7\130\uffb7\131\uffb7\001\002\000\006\017" +
    "\uffef\020\uffef\001\002\000\104\012\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\022\uffb9\023\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\076\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9" +
    "\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\114" +
    "\uffb9\120\uffb9\121\uffb9\122\uffb9\123\uffb9\124\uffb9\125\uffb9" +
    "\126\uffb9\127\uffb9\130\uffb9\131\uffb9\001\002\000\010\012" +
    "\ufff1\017\ufff1\020\ufff1\001\002\000\014\012\uffe9\015\273" +
    "\017\uffe9\020\uffe9\022\300\001\002\000\032\011\037\024" +
    "\031\025\053\026\041\030\044\031\102\032\070\033\103" +
    "\075\043\076\035\077\051\100\046\001\002\000\014\012" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\022\uffe0\001\002\000\006" +
    "\016\274\031\275\001\002\000\014\012\uffdf\015\uffdf\017" +
    "\uffdf\020\uffdf\022\uffdf\001\002\000\004\016\276\001\002" +
    "\000\014\012\uffde\015\uffde\017\uffde\020\uffde\022\uffde\001" +
    "\002\000\010\012\uffe4\017\uffe4\020\uffe4\001\002\000\032" +
    "\011\037\024\031\025\053\026\041\030\044\031\102\032" +
    "\070\033\103\075\043\076\035\077\051\100\046\001\002" +
    "\000\014\012\uffe1\015\uffe1\017\uffe1\020\uffe1\022\uffe1\001" +
    "\002\000\010\012\uffe5\017\uffe5\020\uffe5\001\002\000\016" +
    "\002\ufffb\004\ufffb\005\ufffb\010\ufffb\047\ufffb\053\ufffb\001" +
    "\002\000\006\030\uffe3\033\uffe3\001\002\000\014\012\uffea" +
    "\015\273\017\uffea\020\uffea\022\307\001\002\000\014\012" +
    "\uffeb\015\273\017\uffeb\020\uffeb\022\311\001\002\000\032" +
    "\011\037\024\031\025\053\026\041\030\044\031\102\032" +
    "\070\033\103\075\043\076\035\077\051\100\046\001\002" +
    "\000\010\012\uffe6\017\uffe6\020\uffe6\001\002\000\032\011" +
    "\037\024\031\025\053\026\041\030\044\031\102\032\070" +
    "\033\103\075\043\076\035\077\051\100\046\001\002\000" +
    "\010\012\uffe7\017\uffe7\020\uffe7\001\002\000\004\002\001" +
    "\001\002\000\016\002\ufffe\004\ufffe\005\ufffe\010\ufffe\047" +
    "\ufffe\053\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\012\002\006\006\012\015\010\017\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\012" +
    "\015\313\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\023\011\021\012" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\302\001\001\000\002\001\001\000\006\013\267\014" +
    "\271\001\001\000\002\001\001\000\006\011\266\012\016" +
    "\001\001\000\004\022\026\001\001\000\002\001\001\000" +
    "\060\004\075\007\060\020\063\021\100\022\056\023\076" +
    "\024\051\025\053\027\054\030\044\031\061\032\057\033" +
    "\032\034\066\035\064\036\031\037\047\040\065\041\070" +
    "\042\035\043\062\044\046\045\071\001\001\000\010\030" +
    "\044\031\061\032\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\264\012\016\001\001\000\010\030" +
    "\044\031\061\032\263\001\001\000\002\001\001\000\040" +
    "\027\261\030\044\031\061\032\057\033\032\034\066\035" +
    "\064\036\031\037\047\040\065\041\070\042\035\043\062" +
    "\044\046\045\071\001\001\000\006\011\260\012\016\001" +
    "\001\000\010\030\044\031\061\032\257\001\001\000\002" +
    "\001\001\000\010\030\044\031\061\032\236\001\001\000" +
    "\010\030\044\031\061\032\235\001\001\000\002\001\001" +
    "\000\010\030\044\031\061\032\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\044\031\061\032\231" +
    "\001\001\000\002\001\001\000\010\030\044\031\061\032" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\027\225\030\044\031\061\032\057\033\032\034\066\035" +
    "\064\036\031\037\047\040\065\041\070\042\035\043\062" +
    "\044\046\045\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\004\157\007\060\021\160\022\056\023\076\024" +
    "\051\025\053\027\054\030\044\031\061\032\057\033\032" +
    "\034\066\035\064\036\031\037\047\040\065\041\070\042" +
    "\035\043\062\044\046\045\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\112\012\016\001\001\000\006\011\111\012\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\021\103" +
    "\022\056\023\076\024\051\025\053\027\054\030\044\031" +
    "\061\032\057\033\032\034\066\035\064\036\031\037\047" +
    "\040\065\041\070\042\035\043\062\044\046\045\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\027\106\030" +
    "\044\031\061\032\057\033\032\034\066\035\064\036\031" +
    "\037\047\040\065\041\070\042\035\043\062\044\046\045" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\027" +
    "\114\030\044\031\061\032\057\033\032\034\066\035\064" +
    "\036\031\037\047\040\065\041\070\042\035\043\062\044" +
    "\046\045\071\001\001\000\002\001\001\000\052\021\116" +
    "\022\056\023\076\024\051\025\053\027\054\030\044\031" +
    "\061\032\057\033\032\034\066\035\064\036\031\037\047" +
    "\040\065\041\070\042\035\043\062\044\046\045\071\001" +
    "\001\000\002\001\001\000\024\030\044\031\061\032\120" +
    "\033\032\034\066\035\064\036\031\037\047\040\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\044" +
    "\031\061\032\120\033\032\034\066\035\064\036\031\037" +
    "\123\001\001\000\002\001\001\000\020\030\044\031\061" +
    "\032\120\033\032\034\066\035\064\036\155\001\001\000" +
    "\020\030\044\031\061\032\120\033\032\034\066\035\064" +
    "\036\126\001\001\000\002\001\001\000\016\030\044\031" +
    "\061\032\120\033\032\034\066\035\154\001\001\000\016" +
    "\030\044\031\061\032\120\033\032\034\066\035\153\001" +
    "\001\000\016\030\044\031\061\032\120\033\032\034\066" +
    "\035\152\001\001\000\016\030\044\031\061\032\120\033" +
    "\032\034\066\035\133\001\001\000\002\001\001\000\014" +
    "\030\044\031\061\032\120\033\032\034\151\001\001\000" +
    "\014\030\044\031\061\032\120\033\032\034\136\001\001" +
    "\000\002\001\001\000\012\030\044\031\061\032\120\033" +
    "\150\001\001\000\012\030\044\031\061\032\120\033\141" +
    "\001\001\000\002\001\001\000\010\030\044\031\061\032" +
    "\147\001\001\000\010\030\044\031\061\032\146\001\001" +
    "\000\010\030\044\031\061\032\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\030\044\031\061\032" +
    "\120\033\032\034\066\035\064\036\031\037\047\040\065" +
    "\041\070\042\162\001\001\000\002\001\001\000\026\030" +
    "\044\031\061\032\120\033\032\034\066\035\064\036\031" +
    "\037\047\040\065\041\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\027\170\030\044\031\061\032\057" +
    "\033\032\034\066\035\064\036\031\037\047\040\065\041" +
    "\070\042\035\043\062\044\046\045\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\174\011\021\012\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\030\044\031\061\032" +
    "\057\033\032\034\066\035\064\036\031\037\047\040\065" +
    "\041\070\042\035\043\062\044\046\045\223\001\001\000" +
    "\036\030\044\031\061\032\057\033\032\034\066\035\064" +
    "\036\031\037\047\040\065\041\070\042\035\043\062\044" +
    "\046\045\222\001\001\000\036\030\044\031\061\032\057" +
    "\033\032\034\066\035\064\036\031\037\047\040\065\041" +
    "\070\042\035\043\062\044\046\045\221\001\001\000\036" +
    "\030\044\031\061\032\057\033\032\034\066\035\064\036" +
    "\031\037\047\040\065\041\070\042\035\043\062\044\046" +
    "\045\220\001\001\000\036\030\044\031\061\032\057\033" +
    "\032\034\066\035\064\036\031\037\047\040\065\041\070" +
    "\042\035\043\062\044\046\045\217\001\001\000\036\030" +
    "\044\031\061\032\057\033\032\034\066\035\064\036\031" +
    "\037\047\040\065\041\070\042\035\043\062\044\046\045" +
    "\216\001\001\000\036\030\044\031\061\032\057\033\032" +
    "\034\066\035\064\036\031\037\047\040\065\041\070\042" +
    "\035\043\062\044\046\045\215\001\001\000\036\030\044" +
    "\031\061\032\057\033\032\034\066\035\064\036\031\037" +
    "\047\040\065\041\070\042\035\043\062\044\046\045\214" +
    "\001\001\000\036\030\044\031\061\032\057\033\032\034" +
    "\066\035\064\036\031\037\047\040\065\041\070\042\035" +
    "\043\062\044\046\045\213\001\001\000\036\030\044\031" +
    "\061\032\057\033\032\034\066\035\064\036\031\037\047" +
    "\040\065\041\070\042\035\043\062\044\046\045\212\001" +
    "\001\000\036\030\044\031\061\032\057\033\032\034\066" +
    "\035\064\036\031\037\047\040\065\041\070\042\035\043" +
    "\062\044\046\045\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\030" +
    "\044\031\061\032\120\033\032\034\066\035\064\036\031" +
    "\037\047\040\065\041\070\042\035\043\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\026\242\027\241\030\044\031\061\032" +
    "\057\033\032\034\066\035\064\036\031\037\047\040\065" +
    "\041\070\042\035\043\062\044\046\045\071\001\001\000" +
    "\040\027\253\030\044\031\061\032\057\033\032\034\066" +
    "\035\064\036\031\037\047\040\065\041\070\042\035\043" +
    "\062\044\046\045\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\021\244\022\056\023\076\024\051\025" +
    "\053\027\054\030\044\031\061\032\057\033\032\034\066" +
    "\035\064\036\031\037\047\040\065\041\070\042\035\043" +
    "\062\044\046\045\071\001\001\000\002\001\001\000\040" +
    "\027\247\030\044\031\061\032\057\033\032\034\066\035" +
    "\064\036\031\037\047\040\065\041\070\042\035\043\062" +
    "\044\046\045\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\027\251\030\044\031\061\032\057\033\032" +
    "\034\066\035\064\036\031\037\047\040\065\041\070\042" +
    "\035\043\062\044\046\045\071\001\001\000\002\001\001" +
    "\000\040\027\256\030\044\031\061\032\057\033\032\034" +
    "\066\035\064\036\031\037\047\040\065\041\070\042\035" +
    "\043\062\044\046\045\071\001\001\000\002\001\001\000" +
    "\040\027\255\030\044\031\061\032\057\033\032\034\066" +
    "\035\064\036\031\037\047\040\065\041\070\042\035\043" +
    "\062\044\046\045\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\300\001" +
    "\001\000\040\027\276\030\044\031\061\032\057\033\032" +
    "\034\066\035\064\036\031\037\047\040\065\041\070\042" +
    "\035\043\062\044\046\045\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\027\301\030\044" +
    "\031\061\032\057\033\032\034\066\035\064\036\031\037" +
    "\047\040\065\041\070\042\035\043\062\044\046\045\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\305\014\271\001\001" +
    "\000\004\014\300\001\001\000\040\027\307\030\044\031" +
    "\061\032\057\033\032\034\066\035\064\036\031\037\047" +
    "\040\065\041\070\042\035\043\062\044\046\045\071\001" +
    "\001\000\002\001\001\000\040\027\311\030\044\031\061" +
    "\032\057\033\032\034\066\035\064\036\031\037\047\040" +
    "\065\041\070\042\035\043\062\044\046\045\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public FunctionsAnalyzer getAnalyzer(){
    return action_obj.getAnalyzer();
  }

  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

  public String intLitToString(Object i) {
    if (i instanceof Long) {
      return i.toString().concat("L");
    } else {
      return i.toString();
    }
  }

  public String floatLitToString(Object i) {
    if (i instanceof Float) {
      return i.toString().concat("f");
    } else {
      return i.toString();
    }
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  FunctionsAnalyzer fa = new FunctionsAnalyzer();

  public FunctionsAnalyzer getAnalyzer(){
    return fa;
  }

  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= functions_list 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // functions_list ::= functions_list function 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f.concat("\n" + d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functions_list ::= function 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function ::= data_type IDENTIFIER LPAREN declarator_list RPAREN block_stmt 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; fa.changeCurrentFunction(i, 0); fa.addFunction(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= data_type IDENTIFIER LPAREN RPAREN block_stmt 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; fa.changeCurrentFunction(i, 0); fa.addFunction(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // data_type ::= DOUBLE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // data_type ::= FLOAT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // data_type ::= LONG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_type ::= VOID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl_list ::= decl_list decl 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l.concat("\n" + d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl_list ::= decl 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl ::= decl_type COMMA declarator_list SEMICOLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.concat(" " + l + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= decl_type SEMICOLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.concat(";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarator_list ::= declarator_list COMMA declarator 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l.concat(", " + d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarator_list ::= declarator 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl_type ::= DOUBLE declarator 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("double " + d); fa.addVariable(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_type ::= FLOAT declarator 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("float " + d); fa.addVariable(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decl_type ::= LONG declarator 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("long " + d); fa.addVariable(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decl_type ::= INT declarator 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("int " + d); fa.addVariable(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarator ::= stars IDENTIFIER array_dims 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.concat(i + d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarator ::= stars IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.concat(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarator ::= IDENTIFIER array_dims 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.concat(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarator ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarator ::= stars IDENTIFIER array_dims ASSGN expression 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.concat(i + d + "=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declarator ::= stars IDENTIFIER ASSGN expression 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.concat(i + "=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarator ::= IDENTIFIER array_dims ASSGN expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.concat(d + "=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarator ::= IDENTIFIER ASSGN expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString().concat("=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stars ::= stars STAR 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = r.concat("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stars",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stars ::= STAR 
            {
              String RESULT =null;
		 RESULT = new String("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stars",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_dims ::= array_dims array_dim 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l.concat(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dims",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_dims ::= array_dim 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dims",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array_dim ::= LBRACK RBRACK 
            {
              String RESULT =null;
		 RESULT = new String("[]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dim",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // array_dim ::= LBRACK INTEGER_LITERAL RBRACK 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("[" + parser.intLitToString(i) + "]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dim",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_name ::= DOUBLE IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("double " + i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_name",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_name ::= FLOAT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("float " + i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_name",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_name ::= LONG IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("long " + i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_name",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_name ::= INT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("int " + i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_name",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_name ::= VOID IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("void " + i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_name",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // block_stmt ::= LBRACE stmt_list RBRACE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("{\n" + s + "\n}"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt_list ::= stmt_list decl 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l.concat("\n" + d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt_list ::= decl 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt_list ::= stmt_list stmt 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l.concat("\n" + s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt_list ::= stmt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= block_stmt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s; fa.addStatement();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= iteration_stmt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= return_stmt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s; fa.addStatement();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= expression_stmt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s; fa.addStatement();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return_stmt ::= RETURN SEMICOLON 
            {
              String RESULT =null;
		 RESULT = new String("return;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // return_stmt ::= RETURN expression SEMICOLON 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("return " + e + ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression_stmt ::= expression SEMICOLON 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e.concat(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // iteration_stmt ::= WHILE LPAREN expression RPAREN stmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("while (" + e + ")\n" + s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // iteration_stmt ::= DO stmt WHILE LPAREN expression RPAREN SEMICOLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new String("do " + s + " while (" + e + ");");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // iteration_stmt ::= FOR LPAREN for_arg_list RPAREN stmt 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("for (" + l + ")\n" + s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for_arg_list ::= expression SEMICOLON expression SEMICOLON expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("; " + f + "; " + g); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_arg_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for_arg_list ::= SEMICOLON expression SEMICOLON expression 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(" ; " + f + "; " + g); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_arg_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_arg_list ::= expression SEMICOLON expression SEMICOLON 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e.concat("; " + f + "; "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_arg_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for_arg_list ::= expression SEMICOLON SEMICOLON 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = e.concat("; ; "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_arg_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // for_arg_list ::= SEMICOLON expression SEMICOLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(" ; " + f + "; "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_arg_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // for_arg_list ::= SEMICOLON SEMICOLON expression 
            {
              String RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(" ; ; " + g); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_arg_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for_arg_list ::= SEMICOLON SEMICOLON 
            {
              String RESULT =null;
		 RESULT = new String(" ; ; "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_arg_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // primary_expression ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // primary_expression ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.intLitToString(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primary_expression ::= FLOATING_POINT_LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.floatLitToString(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primary_expression ::= LPAREN expression RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("(" + e + ")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // postfix_expression ::= primary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // postfix_expression ::= postfix_expression LBRACK expression RBRACK 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e.concat("[" + f + "]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // postfix_expression ::= postfix_expression PLUSPLUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e.concat("++"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // postfix_expression ::= postfix_expression DECREMENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e.concat("--"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unary_expression ::= postfix_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unary_expression ::= PLUSPLUS unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("++").concat(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unary_expression ::= DECREMENT unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("--").concat(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unary_expression ::= AMPER unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("&").concat(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unary_expression ::= STAR unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("*").concat(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary_expression ::= PLUS unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("+").concat(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary_expression ::= MINUS unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("-").concat(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unary_expression ::= BIT_COMPL unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("~").concat(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unary_expression ::= NOT unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("!").concat(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // mult_expression ::= unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // mult_expression ::= mult_expression STAR unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("*" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // mult_expression ::= mult_expression DIV unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("/" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // mult_expression ::= mult_expression MOD unary_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("%" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // add_expression ::= mult_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // add_expression ::= add_expression PLUS mult_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("+" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // add_expression ::= add_expression MINUS mult_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("-" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // shift_expression ::= add_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // shift_expression ::= shift_expression LSHIFT add_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("<<" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // shift_expression ::= shift_expression RSHIFT add_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat(">>" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // rel_expression ::= shift_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // rel_expression ::= rel_expression LT shift_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("<" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // rel_expression ::= rel_expression GT shift_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat(">" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // rel_expression ::= rel_expression LTEQ shift_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("<=" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // rel_expression ::= rel_expression GTEQ shift_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat(">=" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // equality_expression ::= rel_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // equality_expression ::= equality_expression EQUAL rel_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("==" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // equality_expression ::= equality_expression NOTEQ rel_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("!=" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // and_expression ::= equality_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // and_expression ::= and_expression AMPER equality_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("||" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // xor_expression ::= and_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor_expression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // xor_expression ::= xor_expression BIT_XOR and_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("||" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor_expression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // or_expression ::= xor_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // or_expression ::= or_expression BIT_OR xor_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("||" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // logical_and_expression ::= or_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // logical_and_expression ::= logical_and_expression AND or_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("||" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // logical_or_expression ::= logical_and_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // logical_or_expression ::= logical_or_expression OR logical_and_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("||" + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // assignment_expression ::= logical_or_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // assignment_expression ::= unary_expression ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // assignment_expression ::= unary_expression MULT_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("*=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // assignment_expression ::= unary_expression DIV_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("/=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // assignment_expression ::= unary_expression MOD_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("%=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // assignment_expression ::= unary_expression ADD_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("+=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // assignment_expression ::= unary_expression SUB_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("-=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // assignment_expression ::= unary_expression LSHIFT_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("<<=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // assignment_expression ::= unary_expression RSHIFT_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat(">>=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // assignment_expression ::= unary_expression BITAND_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("&=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // assignment_expression ::= unary_expression BITXOR_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("^=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // assignment_expression ::= unary_expression BITOR_ASSGN assignment_expression 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.concat("|=" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= assignment_expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // translation_unit ::= external_declaration 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("translation_unit",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // translation_unit ::= translation_unit external_declaration 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("translation_unit",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // external_declaration ::= function 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // external_declaration ::= decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
